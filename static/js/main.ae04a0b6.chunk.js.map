{"version":3,"sources":["assets/twitter-logo.svg","assets/loader.gif","App.js","index.js"],"names":["CONTRACT_ADDRESS","App","useState","currentAccount","setCurrentAccount","currenttxn","setCurrenttxn","TotalNftSold","setTotalNftSold","checkIfWalletIsConnected","window","ethereum","console","log","request","method","accounts","length","account","TotalNftMintedSofar","setupEventListener","connectWallet","alert","provider","ethers","providers","Web3Provider","signer","getSigner","Contract","myEpicNft","abi","on","from","tokenId","toNumber","error","askContractToMintNft","connectedContract","makeAnEpicNFT","nftTxn","wait","hash","getTotalNFTsMintedSoFar","then","TotalNfts","useEffect","className","src","loader","alt","onClick","href","target","rel","twitterLogo","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"i81EAAe,MAA0B,yCCA1B,MAA0B,mC,eCYnCA,EAAmB,6CAiMVC,EA/LH,WACV,MAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAAoCF,mBAAS,SAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAwCJ,mBAAS,GAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KAEMC,EAAwB,iDAAG,yGACVC,OAAbC,EADuB,EACvBA,SADuB,uBAI7BC,QAAQC,IAAI,gCAJiB,0BAO7BD,QAAQC,IAAI,8BAA+BF,GAPd,uBAURA,EAASG,QAAQ,CAAEC,OAAQ,iBAVnB,OAYP,KAFlBC,EAVyB,QAYlBC,QACLC,EAAUF,EAAS,GACzBJ,QAAQC,IAAI,+BAAgCK,GAC5Cd,EAAkBc,GAClBC,IACAC,KAEAR,QAAQC,IAAI,+BAnBiB,4CAAH,qDA0BxBQ,EAAa,iDAAG,gHAEGX,OAAbC,EAFU,EAEVA,SAFU,uBAKhBW,MAAM,sCALU,0CAYKX,EAASG,QAAQ,CAAEC,OAAQ,wBAZhC,OAYZC,EAZY,OAiBlBJ,QAAQC,IAAI,YAAaG,EAAS,IAClCZ,EAAkBY,EAAS,IAC3BI,IAnBkB,kDAqBlBR,QAAQC,IAAR,MArBkB,0DAAH,qDA0BbO,EAAkB,iDAAG,oGACzB,IAAK,EACkBV,QAAbC,EADN,EACMA,WAGAY,EAAW,IAAIC,IAAOC,UAAUC,aAAaf,GAC7CgB,EAASJ,EAASK,YACE,IAAIJ,IAAOK,SAAS7B,EAAkB8B,EAAUC,IAAKJ,GAE7DK,GAAG,oBAAoB,SAACC,EAAMC,GAC9CtB,QAAQC,IAAIoB,EAAMC,EAAQC,YAC1Bb,MAAM,kMAAD,OAAmMtB,EAAnM,YAAuNkC,EAAQC,gBAGtOvB,QAAQC,IAAI,0BAGZD,QAAQC,IAAI,kCAEd,MAAOuB,GACPxB,QAAQC,IAAIuB,GApBW,2CAAH,qDAwBlBC,EAAoB,iDAAG,sHAEJ3B,SAAbC,EAFiB,EAEjBA,UAFiB,wBAKjBY,EAAW,IAAIC,IAAOC,UAAUC,aAAaf,GAC7CgB,EAASJ,EAASK,YAClBU,EAAoB,IAAId,IAAOK,SAAS7B,EAAkB8B,EAAUC,IAAKJ,GAE/Ef,QAAQC,IAAI,yCATW,SAUJyB,EAAkBC,gBAVd,cAUnBC,EAVmB,OAWvBlC,EAAc,QACdM,QAAQC,IAAI,yBAZW,UAajB2B,EAAOC,OAbU,QAcvBnC,EAAc,SACdM,QAAQC,IAAR,kEAAuE2B,EAAOE,OAC9EvB,IAhBuB,wBAkBvBP,QAAQC,IAAI,kCAlBW,0DAqBzBD,QAAQC,IAAR,MArByB,0DAAH,qDAyBpBM,EAAmB,iDAAG,oHAEHT,SAAbC,EAFgB,EAEhBA,UAFgB,wBAKhBY,EAAW,IAAIC,IAAOC,UAAUC,aAAaf,GAC7CgB,EAASJ,EAASK,YAClBU,EAAoB,IAAId,IAAOK,SAAS7B,EAAkB8B,EAAUC,IAAKJ,GAPzD,SAShBW,EAAkBK,0BAA0BC,MAAK,SAACC,GACtDjC,QAAQC,IAAI,kBAAmBgC,EAAUV,YACzC3B,EAAgBqC,EAAUV,eAXN,+BAkBtBvB,QAAQC,IAAI,kCAlBU,0DAqBxBD,QAAQC,IAAR,MArBwB,0DAAH,qDAqCzB,OALAiC,qBAAU,WACRrC,MACA,IAIA,qBAAKsC,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,mBAAGA,UAAU,uBAAb,+BACA,mBAAGA,UAAU,WAAb,gDAGmB,IAAjBxC,EAAqB,sBACtB,oBAAGwC,UAAU,WAAb,6BAAyCxC,EAAzC,IA5Jc,OA8JC,UAAfF,EACC,sBAEA,qBAAK2C,IAAKC,EAAQC,IAAI,aAAaH,UAAU,cAK/C,8BACoB,KAAnB5C,EA9BP,wBAAQgD,QAAS9B,EAAe0B,UAAU,mCAA1C,+BAiCQ,wBAAQI,QAASd,EAAsBU,UAAU,mCAAjD,wBAKJ,mBACGK,KAjLU,kEAkLVC,OAAO,SACPC,IAAI,aAHP,SAII,wBAASP,UAAU,iBAAnB,uDAEJ,sBAAKA,UAAU,mBAAf,UACE,qBAAKG,IAAI,eAAeH,UAAU,eAAeC,IAAKO,IACtD,mBACER,UAAU,cACVK,KA3LS,+BA4LTC,OAAO,SACPC,IAAI,aAJN,6BA1La,qBCFvBE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ae04a0b6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","export default __webpack_public_path__ + \"static/media/loader.dee42fdf.gif\";","import React, { useEffect, useState } from \"react\";\nimport './styles/App.css';\nimport { ethers } from \"ethers\";\nimport twitterLogo from './assets/twitter-logo.svg';\nimport loader from './assets/loader.gif';\nimport myEpicNft from './utils/MyEpicNFT.json';\n\nconst TWITTER_HANDLE = 'Kishan';\nconst TWITTER_LINK = 'https://twitter.com/maxslimb';\nconst OPENSEA_LINK = 'https://testnets.opensea.io/collection/class-of-2022-qpdb1irrjr';\nconst TOTAL_MINT_COUNT = 100;\n\nconst CONTRACT_ADDRESS = \"0xF036C1546CcD4E61ca3535b12FdF0AeB5297B6dC\";\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [currenttxn, setCurrenttxn] = useState(\"false\");\n  const [TotalNftSold, setTotalNftSold] = useState(0);\n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n      TotalNftMintedSofar();\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  }\n\n  /*\n  * Implement your connectWallet method here\n  */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Please install MetaMask! Extension\");\n        return;\n      }\n\n      /*\n      * Request access to account.\n      */\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      /*\n      * Public Address!\n      */\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); \n      setupEventListener()\n    } catch (error) {\n      console.log(error);\n    }\n    \n  }\n\n  const setupEventListener = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber())\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\n        });\n\n        console.log(\"Setup event listener!\")\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const askContractToMintNft = async () => {\n    try {\n      const { ethereum } = window;\n  \n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n  \n        console.log(\"Going to pop wallet now to pay gas...\")\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n        setCurrenttxn(\"true\")\n        console.log(\"Mining...please wait.\")\n        await nftTxn.wait();\n        setCurrenttxn(\"false\")\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n        TotalNftMintedSofar();\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const TotalNftMintedSofar = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n        await connectedContract.getTotalNFTsMintedSoFar().then((TotalNfts)=>{\n          console.log(\"Total Nfts Sold\", TotalNfts.toNumber())\n          setTotalNftSold(TotalNfts.toNumber())\n        })\n\n       \n        //return TotalNfts.toNumber()\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  },[])\n\n \n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">Class of 2022 NFT</p>\n          <p className=\"sub-text\">\n            Unique NFT for the Outgoing Class!\n          </p>\n          { TotalNftSold === 0 ? <p></p> : \n          (<p className=\"sub-text\">Total Nfts Sold {TotalNftSold}/{TOTAL_MINT_COUNT}</p>)\n            }\n          {currenttxn === \"false\" ? (\n            <p></p>\n          ) : (\n            <img src={loader} alt=\"Loading...\" className=\"loader\"></img>\n            \n          )}\n          \n          </div>\n          <div>\n          {currentAccount === \"\" ? (\n            renderNotConnectedContainer()\n          ) : (\n            <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\n              Mint NFT\n            </button>\n          )}\n        </div>\n        <a\n           href={OPENSEA_LINK}\n           target=\"_blank\"\n           rel=\"noreferrer\">\n            <button  className=\"opensea-button\">ðŸŒŠ View Collection on OpenSea</button>\n        </a>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}